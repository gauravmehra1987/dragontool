#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Combobulator.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Combobulator")]
	public partial class CombobulatorDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCar(Car instance);
    partial void UpdateCar(Car instance);
    partial void DeleteCar(Car instance);
    partial void InsertTitle(Title instance);
    partial void UpdateTitle(Title instance);
    partial void DeleteTitle(Title instance);
    partial void InsertDealer(Dealer instance);
    partial void UpdateDealer(Dealer instance);
    partial void DeleteDealer(Dealer instance);
    #endregion
		
		public CombobulatorDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CombobulatorConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CombobulatorDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CombobulatorDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CombobulatorDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CombobulatorDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Car> Cars
		{
			get
			{
				return this.GetTable<Car>();
			}
		}
		
		public System.Data.Linq.Table<Title> Titles
		{
			get
			{
				return this.GetTable<Title>();
			}
		}
		
		public System.Data.Linq.Table<Dealer> Dealers
		{
			get
			{
				return this.GetTable<Dealer>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetCar")]
		public ISingleResult<Car> GetCar([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ModelCode", DbType="VarChar(10)")] string modelCode)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), modelCode);
			return ((ISingleResult<Car>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetCars")]
		public ISingleResult<Car> GetCars()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Car>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetTitles")]
		public ISingleResult<Title> GetTitles()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Title>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetDealers")]
		public ISingleResult<Dealer> GetDealers()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Dealer>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cars")]
	public partial class Car : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Model;
		
		private string _ModelCode;
		
		private string _Colour;
		
		private string _Engine;
		
		private string _DisplayName;
		
		private string _Type;
		
		private string _CapacityScale;
		
		private string _LuggageScale;
		
		private string _Options;
		
		private string _PriceScale;
		
		private string _Cost;
		
		private string _PerformanceScale;
		
		private string _MPH;
		
		private string _EconomyScale;
		
		private string _MPG;
		
		private string _UsageScale;
		
		private string _Alt1;
		
		private string _Alt2;
		
		private string _Alt3;
		
		private string _ImageURL;
		
		private string _TermsConditions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnModelCodeChanging(string value);
    partial void OnModelCodeChanged();
    partial void OnColourChanging(string value);
    partial void OnColourChanged();
    partial void OnEngineChanging(string value);
    partial void OnEngineChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnCapacityScaleChanging(string value);
    partial void OnCapacityScaleChanged();
    partial void OnLuggageScaleChanging(string value);
    partial void OnLuggageScaleChanged();
    partial void OnOptionsChanging(string value);
    partial void OnOptionsChanged();
    partial void OnPriceScaleChanging(string value);
    partial void OnPriceScaleChanged();
    partial void OnCostChanging(string value);
    partial void OnCostChanged();
    partial void OnPerformanceScaleChanging(string value);
    partial void OnPerformanceScaleChanged();
    partial void OnMPHChanging(string value);
    partial void OnMPHChanged();
    partial void OnEconomyScaleChanging(string value);
    partial void OnEconomyScaleChanged();
    partial void OnMPGChanging(string value);
    partial void OnMPGChanged();
    partial void OnUsageScaleChanging(string value);
    partial void OnUsageScaleChanged();
    partial void OnAlt1Changing(string value);
    partial void OnAlt1Changed();
    partial void OnAlt2Changing(string value);
    partial void OnAlt2Changed();
    partial void OnAlt3Changing(string value);
    partial void OnAlt3Changed();
    partial void OnImageURLChanging(string value);
    partial void OnImageURLChanged();
    partial void OnTermsConditionsChanging(string value);
    partial void OnTermsConditionsChanged();
    #endregion
		
		public Car()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="NVarChar(MAX)")]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelCode", DbType="NVarChar(MAX)")]
		public string ModelCode
		{
			get
			{
				return this._ModelCode;
			}
			set
			{
				if ((this._ModelCode != value))
				{
					this.OnModelCodeChanging(value);
					this.SendPropertyChanging();
					this._ModelCode = value;
					this.SendPropertyChanged("ModelCode");
					this.OnModelCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Colour", DbType="NVarChar(MAX)")]
		public string Colour
		{
			get
			{
				return this._Colour;
			}
			set
			{
				if ((this._Colour != value))
				{
					this.OnColourChanging(value);
					this.SendPropertyChanging();
					this._Colour = value;
					this.SendPropertyChanged("Colour");
					this.OnColourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Engine", DbType="NVarChar(MAX)")]
		public string Engine
		{
			get
			{
				return this._Engine;
			}
			set
			{
				if ((this._Engine != value))
				{
					this.OnEngineChanging(value);
					this.SendPropertyChanging();
					this._Engine = value;
					this.SendPropertyChanged("Engine");
					this.OnEngineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(MAX)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(MAX)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CapacityScale", DbType="NVarChar(MAX)")]
		public string CapacityScale
		{
			get
			{
				return this._CapacityScale;
			}
			set
			{
				if ((this._CapacityScale != value))
				{
					this.OnCapacityScaleChanging(value);
					this.SendPropertyChanging();
					this._CapacityScale = value;
					this.SendPropertyChanged("CapacityScale");
					this.OnCapacityScaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LuggageScale", DbType="NVarChar(MAX)")]
		public string LuggageScale
		{
			get
			{
				return this._LuggageScale;
			}
			set
			{
				if ((this._LuggageScale != value))
				{
					this.OnLuggageScaleChanging(value);
					this.SendPropertyChanging();
					this._LuggageScale = value;
					this.SendPropertyChanged("LuggageScale");
					this.OnLuggageScaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Options", DbType="NVarChar(MAX)")]
		public string Options
		{
			get
			{
				return this._Options;
			}
			set
			{
				if ((this._Options != value))
				{
					this.OnOptionsChanging(value);
					this.SendPropertyChanging();
					this._Options = value;
					this.SendPropertyChanged("Options");
					this.OnOptionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceScale", DbType="NVarChar(MAX)")]
		public string PriceScale
		{
			get
			{
				return this._PriceScale;
			}
			set
			{
				if ((this._PriceScale != value))
				{
					this.OnPriceScaleChanging(value);
					this.SendPropertyChanging();
					this._PriceScale = value;
					this.SendPropertyChanged("PriceScale");
					this.OnPriceScaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="NVarChar(MAX)")]
		public string Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PerformanceScale", DbType="NVarChar(MAX)")]
		public string PerformanceScale
		{
			get
			{
				return this._PerformanceScale;
			}
			set
			{
				if ((this._PerformanceScale != value))
				{
					this.OnPerformanceScaleChanging(value);
					this.SendPropertyChanging();
					this._PerformanceScale = value;
					this.SendPropertyChanged("PerformanceScale");
					this.OnPerformanceScaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MPH", DbType="NVarChar(MAX)")]
		public string MPH
		{
			get
			{
				return this._MPH;
			}
			set
			{
				if ((this._MPH != value))
				{
					this.OnMPHChanging(value);
					this.SendPropertyChanging();
					this._MPH = value;
					this.SendPropertyChanged("MPH");
					this.OnMPHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EconomyScale", DbType="NVarChar(MAX)")]
		public string EconomyScale
		{
			get
			{
				return this._EconomyScale;
			}
			set
			{
				if ((this._EconomyScale != value))
				{
					this.OnEconomyScaleChanging(value);
					this.SendPropertyChanging();
					this._EconomyScale = value;
					this.SendPropertyChanged("EconomyScale");
					this.OnEconomyScaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MPG", DbType="NVarChar(MAX)")]
		public string MPG
		{
			get
			{
				return this._MPG;
			}
			set
			{
				if ((this._MPG != value))
				{
					this.OnMPGChanging(value);
					this.SendPropertyChanging();
					this._MPG = value;
					this.SendPropertyChanged("MPG");
					this.OnMPGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsageScale", DbType="NVarChar(MAX)")]
		public string UsageScale
		{
			get
			{
				return this._UsageScale;
			}
			set
			{
				if ((this._UsageScale != value))
				{
					this.OnUsageScaleChanging(value);
					this.SendPropertyChanging();
					this._UsageScale = value;
					this.SendPropertyChanged("UsageScale");
					this.OnUsageScaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alt1", DbType="NVarChar(MAX)")]
		public string Alt1
		{
			get
			{
				return this._Alt1;
			}
			set
			{
				if ((this._Alt1 != value))
				{
					this.OnAlt1Changing(value);
					this.SendPropertyChanging();
					this._Alt1 = value;
					this.SendPropertyChanged("Alt1");
					this.OnAlt1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alt2", DbType="NVarChar(MAX)")]
		public string Alt2
		{
			get
			{
				return this._Alt2;
			}
			set
			{
				if ((this._Alt2 != value))
				{
					this.OnAlt2Changing(value);
					this.SendPropertyChanging();
					this._Alt2 = value;
					this.SendPropertyChanged("Alt2");
					this.OnAlt2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alt3", DbType="NVarChar(MAX)")]
		public string Alt3
		{
			get
			{
				return this._Alt3;
			}
			set
			{
				if ((this._Alt3 != value))
				{
					this.OnAlt3Changing(value);
					this.SendPropertyChanging();
					this._Alt3 = value;
					this.SendPropertyChanged("Alt3");
					this.OnAlt3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageURL", CanBeNull=false)]
		public string ImageURL
		{
			get
			{
				return this._ImageURL;
			}
			set
			{
				if ((this._ImageURL != value))
				{
					this.OnImageURLChanging(value);
					this.SendPropertyChanging();
					this._ImageURL = value;
					this.SendPropertyChanged("ImageURL");
					this.OnImageURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermsConditions", CanBeNull=false)]
		public string TermsConditions
		{
			get
			{
				return this._TermsConditions;
			}
			set
			{
				if ((this._TermsConditions != value))
				{
					this.OnTermsConditionsChanging(value);
					this.SendPropertyChanging();
					this._TermsConditions = value;
					this.SendPropertyChanged("TermsConditions");
					this.OnTermsConditionsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Titles")]
	public partial class Title : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Title()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dealers")]
	public partial class Dealer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Dealer()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591

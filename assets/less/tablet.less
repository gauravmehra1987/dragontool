// Tablet styles go here

// http://lesscss.org/features/
// use mixins for referencing re-usable blocks of code
// use arguments in mixins, if you need to dynamically change their properties (for example color)
// use variables to store often used values and reference them in your css
// you can use math operations to calculate stuff
// nest your css rules accorging to the hierarchy of the HTML elements
// ampersand references the parent selector in the nestedd LESS style

// Have a look at animate.css - http://daneden.github.io/animate.css/

@media ( min-width: 721px ) and ( max-width: 1024px ) and ( orientation: portrait ) {

	html > body {

		.layout-footer { display: none; }

		.layout-wrapper {

			display: block;

			.layout {

				display: block;
				margin-top: 3px;
				overflow: hidden;
				position: relative;

				height: 966px;
				width: 100%;

				.column {

					&.right, &.left {

						background: @trueBlack;

						float: none;
						margin: 0;
						position: absolute;

						top: 0;
						left: 0;
						right: 0;
						
						width: auto;

						.panel {

							margin: @margin;
							padding-left: 140px;
							padding-right: 140px;
							position: static;

							height: ~'calc( 100% - 160px )';

						}

					}

					&.left {

						.transition( top 0.6s );

						top: 846px;

						height: ~'calc( 100% + 120px )';

						&.open {

							top: 0;

							#dash #tablet-toggle:before {

								.rotate( 90 );

								color: @white;

							}

						}

						#dash {

							height: 965px;

							#tablet-toggle {

								.hide-text;

								background: @black;
								color: @chiliRed;
								display: block;
								font-size: 72px;
								padding: 48px;
								position: relative;
								text-decoration: none;

								&:before {

									.icon;
									.icon-raquo;
									.rotate( 270 );
									.transition( color 0.2s, transform 0.6s ease-out );

									margin-top: -0.5em;
									margin-left: -0.5em;
									position: absolute;

									top: 50%;
									left: 50%;

								}

							}

							#dash-left,
							#dash-middle,
							#dash-right {

								height: ~'calc( 100% - 120px )';

							}

						}

					}

				}

			}

		}

		#results-page {

			.layout {

				// Rearrange order of elements in the HTML

				.display( flex );
				.flex-direction( column-reverse );

				position: static;

				height: auto;

				.column {

					position: static;

					&.right {

						height: auto;

						.panel {

							padding-left: 30px;
							padding-right: 30px;

							form {

								.clearfix;
								
								.fields,
								.checkboxes {

									float: left;
									margin: 0 0 @margin;

									width: 47.5%;

								}

								.checkboxes {

									margin-left: 5%;

									& + .form-control {

										clear: both;
										float: none;
										display: block;

										button {

											display: block;

											width: 100% !important;

										}

									}

								}

							}

						}

					}

				}

			}

		}

	}

}